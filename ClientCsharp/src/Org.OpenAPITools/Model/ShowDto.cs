/*
 * TicketAlarm
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ShowDto
    /// </summary>
    [DataContract(Name = "ShowDto")]
    public partial class ShowDto : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ShowDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="idArtist">idArtist.</param>
        /// <param name="title">title.</param>
        /// <param name="dateTimeShow">dateTimeShow.</param>
        /// <param name="idFnac">idFnac.</param>
        /// <param name="city">city.</param>
        /// <param name="arena">arena.</param>
        /// <param name="url">url.</param>
        /// <param name="available">available.</param>
        /// <param name="artist">artist.</param>
        public ShowDto(int id = default(int), int idArtist = default(int), string title = default(string), DateTime dateTimeShow = default(DateTime), int idFnac = default(int), string city = default(string), string arena = default(string), string url = default(string), bool available = default(bool), ArtistDto artist = default(ArtistDto))
        {
            this.Id = id;
            this.IdArtist = idArtist;
            this.Title = title;
            this.DateTimeShow = dateTimeShow;
            this.IdFnac = idFnac;
            this.City = city;
            this.Arena = arena;
            this.Url = url;
            this.Available = available;
            this.Artist = artist;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets IdArtist
        /// </summary>
        [DataMember(Name = "idArtist", EmitDefaultValue = false)]
        public int IdArtist { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets DateTimeShow
        /// </summary>
        [DataMember(Name = "dateTimeShow", EmitDefaultValue = false)]
        public DateTime DateTimeShow { get; set; }

        /// <summary>
        /// Gets or Sets IdFnac
        /// </summary>
        [DataMember(Name = "idFnac", EmitDefaultValue = false)]
        public int IdFnac { get; set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [DataMember(Name = "city", EmitDefaultValue = true)]
        public string City { get; set; }

        /// <summary>
        /// Gets or Sets Arena
        /// </summary>
        [DataMember(Name = "arena", EmitDefaultValue = true)]
        public string Arena { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name = "url", EmitDefaultValue = true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [DataMember(Name = "available", EmitDefaultValue = true)]
        public bool Available { get; set; }

        /// <summary>
        /// Gets or Sets Artist
        /// </summary>
        [DataMember(Name = "artist", EmitDefaultValue = false)]
        public ArtistDto Artist { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ShowDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IdArtist: ").Append(IdArtist).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  DateTimeShow: ").Append(DateTimeShow).Append("\n");
            sb.Append("  IdFnac: ").Append(IdFnac).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  Arena: ").Append(Arena).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  Artist: ").Append(Artist).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
