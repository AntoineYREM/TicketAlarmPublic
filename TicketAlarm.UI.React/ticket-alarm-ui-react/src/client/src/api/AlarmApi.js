/**
 * TicketAlarm
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AlarmDto from '../model/AlarmDto';
import ShowDto from '../model/ShowDto';

/**
* Alarm service.
* @module api/AlarmApi
* @version v1
*/
export default class AlarmApi {

    /**
    * Constructs a new AlarmApi. 
    * @alias module:api/AlarmApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiAlarmsIdAlarmPut operation.
     * @callback module:api/AlarmApi~apiAlarmsIdAlarmPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} idAlarm 
     * @param {Object} opts Optional parameters
     * @param {module:model/AlarmDto} [alarmDto] 
     * @param {module:api/AlarmApi~apiAlarmsIdAlarmPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowDto}
     */
    apiAlarmsIdAlarmPut(idAlarm, opts, callback) {
      opts = opts || {};
      let postBody = opts['alarmDto'];
      // verify the required parameter 'idAlarm' is set
      if (idAlarm === undefined || idAlarm === null) {
        throw new Error("Missing the required parameter 'idAlarm' when calling apiAlarmsIdAlarmPut");
      }

      let pathParams = {
        'idAlarm': idAlarm
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ShowDto;
      return this.apiClient.callApi(
        '/api/alarms/{idAlarm}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlarmsIdShowGet operation.
     * @callback module:api/AlarmApi~apiAlarmsIdShowGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShowDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} idShow 
     * @param {module:api/AlarmApi~apiAlarmsIdShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShowDto>}
     */
    apiAlarmsIdShowGet(idShow, callback) {
      let postBody = null;
      // verify the required parameter 'idShow' is set
      if (idShow === undefined || idShow === null) {
        throw new Error("Missing the required parameter 'idShow' when calling apiAlarmsIdShowGet");
      }

      let pathParams = {
        'idShow': idShow
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ShowDto];
      return this.apiClient.callApi(
        '/api/alarms/{idShow}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAlarmsPost operation.
     * @callback module:api/AlarmApi~apiAlarmsPostCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/AlarmDto} [alarmDto] 
     * @param {module:api/AlarmApi~apiAlarmsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    apiAlarmsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['alarmDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/alarms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
