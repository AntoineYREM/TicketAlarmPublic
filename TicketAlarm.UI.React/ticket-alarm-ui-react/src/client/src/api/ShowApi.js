/**
 * TicketAlarm
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ShowDto from '../model/ShowDto';

/**
* Show service.
* @module api/ShowApi
* @version v1
*/
export default class ShowApi {

    /**
    * Constructs a new ShowApi. 
    * @alias module:api/ShowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiShowsGet operation.
     * @callback module:api/ShowApi~apiShowsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ShowDto>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {Boolean} [active] 
     * @param {module:api/ShowApi~apiShowsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ShowDto>}
     */
    apiShowsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'active': opts['active']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = [ShowDto];
      return this.apiClient.callApi(
        '/api/shows', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiShowsIdShowGet operation.
     * @callback module:api/ShowApi~apiShowsIdShowGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} idShow 
     * @param {module:api/ShowApi~apiShowsIdShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowDto}
     */
    apiShowsIdShowGet(idShow, callback) {
      let postBody = null;
      // verify the required parameter 'idShow' is set
      if (idShow === undefined || idShow === null) {
        throw new Error("Missing the required parameter 'idShow' when calling apiShowsIdShowGet");
      }

      let pathParams = {
        'idShow': idShow
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ShowDto;
      return this.apiClient.callApi(
        '/api/shows/{idShow}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiShowsIdShowPut operation.
     * @callback module:api/ShowApi~apiShowsIdShowPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShowDto} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Number} idShow 
     * @param {Object} opts Optional parameters
     * @param {module:model/ShowDto} [showDto] 
     * @param {module:api/ShowApi~apiShowsIdShowPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShowDto}
     */
    apiShowsIdShowPut(idShow, opts, callback) {
      opts = opts || {};
      let postBody = opts['showDto'];
      // verify the required parameter 'idShow' is set
      if (idShow === undefined || idShow === null) {
        throw new Error("Missing the required parameter 'idShow' when calling apiShowsIdShowPut");
      }

      let pathParams = {
        'idShow': idShow
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = ShowDto;
      return this.apiClient.callApi(
        '/api/shows/{idShow}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiShowsPost operation.
     * @callback module:api/ShowApi~apiShowsPostCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {module:model/ShowDto} [showDto] 
     * @param {module:api/ShowApi~apiShowsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    apiShowsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['showDto'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json', 'text/json', 'application/*+json'];
      let accepts = ['text/plain', 'application/json', 'text/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/api/shows', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
